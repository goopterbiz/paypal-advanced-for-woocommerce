class GooglePayCheckoutButton{static googlePayConfig;static isConfigLoading;static configPromise;static googlePayObject;static baseRequest={apiVersion:2,apiVersionMinor:0};constructor(){}async initGooglePayConfig(){return GooglePayCheckoutButton.isConfigLoading?(GooglePayCheckoutButton.configPromise||(GooglePayCheckoutButton.configPromise=new Promise(((e,o)=>{let t=setInterval((()=>{GooglePayCheckoutButton.googlePayConfig&&(e(GooglePayCheckoutButton.googlePayConfig),clearInterval(t))}),100)}))),GooglePayCheckoutButton.configPromise):(GooglePayCheckoutButton.googlePayConfig||(GooglePayCheckoutButton.isConfigLoading=!0,GooglePayCheckoutButton.googlePayConfig=await GooglePayCheckoutButton.googlePay().config()),GooglePayCheckoutButton.googlePayConfig)}static googlePay(){return GooglePayCheckoutButton.googlePayObject||(GooglePayCheckoutButton.googlePayObject=goopter_paypal_sdk.Googlepay()),GooglePayCheckoutButton.googlePayObject}render(e){0!==jQuery(e).length&&"undefined"!=typeof goopter_paypal_sdk&&this.initGooglePayConfig().then((()=>{let o=this.getGooglePaymentsClient(),t=GooglePayCheckoutButton.googlePayConfig.allowedPaymentMethods;o.isReadyToPay(this.getGoogleIsReadyToPayRequest(t)).then((o=>{o.result&&(this.showGooglePayPaymentMethod(),this.renderButton(e))})).catch((o=>{console.error("errorcatch",o),this.removeGooglePayPaymentMethod(e)}))}))}getGoogleIsReadyToPayRequest(e){return Object.assign({},GooglePayCheckoutButton.baseRequest,{allowedPaymentMethods:e})}isShippingRequired(){const e=goopterOrder.getCartDetails();return!goopterOrder.isCheckoutPage()&&e&&void 0!==e.shippingRequired&&e.shippingRequired}getGooglePaymentsClient(e){return new google.payments.api.PaymentsClient({environment:"1"===goopter_ppcp_manager.sandbox_mode?"TEST":"PRODUCTION",paymentDataCallbacks:{onPaymentDataChanged:this.isShippingRequired()?this.onPaymentDataChanged.bind(null,{thisObject:this}):null,onPaymentAuthorized:this.onPaymentAuthorized.bind(null,{thisObject:this})}})}showGooglePayPaymentMethod(){goopterOrder.isCheckoutPage()&&jQuery(".wc_payment_method.payment_method_goopter_ppcp_google_pay").show()}removeGooglePayPaymentMethod(e){goopterOrder.isCheckoutPage()&&jQuery(".wc_payment_method.payment_method_goopter_ppcp_google_pay").hide(),jQuery(e).length&&jQuery(e).remove()}parseErrorMessage(e){if(console.log(e,JSON.stringify(e)),"PayPalGooglePayError"===e.name){let o=e.paypalDebugId;return"ERROR_VALIDATING_MERCHANT"===e.errorName?localizedMessages.error_validating_merchant+" [GooglePay DebugId:"+o+"]":localizedMessages.general_error_message+" [GooglePay DebugId:"+o+"]"}return e}onPaymentAuthorized(e,o){return console.log("onPaymentAuthorized",e,o),new Promise(((t,r)=>{goopterOrder.showProcessingSpinner(),e.thisObject.processPayment(e,o).then((function(e){t({transactionState:"SUCCESS"})})).catch((function(o){let r=e.thisObject.parseErrorMessage(o);goopterOrder.hideProcessingSpinner(),goopterOrder.showError(r),t({transactionState:"ERROR"})}))}))}onPaymentDataChanged(e,o){return new Promise((async function(t,r){console.log("on shipping changed",o);let a=o.shippingAddress,n={};if("INITIALIZE"==o.callbackTrigger||"SHIPPING_ADDRESS"==o.callbackTrigger)try{let o={administrativeArea:a.administrativeArea,countryCode:a.countryCode,locality:a.locality,postalCode:a.postalCode},t=await goopterOrder.shippingAddressUpdate({shippingDetails:o});if(void 0===t.totalAmount)throw new Error(localizedMessages.shipping_amount_update_error);goopterOrder.updateCartTotalsInEnvironment(t),n.newTransactionInfo=e.thisObject.getGoogleTransactionInfo()}catch(o){console.log("shipping change error"),goopterOrder.handleCreateOrderError(e.thisObject.parseErrorMessage(o),e.thisObject.errorLogId),n.error=localizedMessages.shipping_amount_pull_error,r(localizedMessages.shipping_amount_pull_error)}t(n)}))}async processPayment(e,o){try{console.log("processPayment",e,JSON.stringify(o));let t=e.thisObject;goopterOrder.showProcessingSpinner();let r=await goopterOrder.createOrder({goopter_ppcp_button_selector:t.containerSelector,errorLogId:e.thisObject.errorLogId}).then((e=>(console.log("orderCreated",e),goopterOrder.updateCartTotalsInEnvironment(e),e.orderID)));const{status:a}=await GooglePayCheckoutButton.googlePay().confirmOrder({orderId:r,paymentMethodData:o.paymentMethodData});if("APPROVED"===a){if(!goopterOrder.isCheckoutPage()){let t,r=o.shippingAddress;o.paymentMethodData&&o.paymentMethodData.info&&o.paymentMethodData.info.billingAddress&&(t=o.paymentMethodData.info.billingAddress),o.email&&(t||(t={}),t.emailAddress=o.email),await goopterOrder.shippingAddressUpdate({shippingDetails:r},{billingDetails:t},e.thisObject.errorLogId)}return goopterOrder.approveOrder({orderID:r,payerID:""}),{transactionState:"SUCCESS"}}return{transactionState:"ERROR"}}catch(o){return console.log("processPaymentError",o),goopterOrder.handleCreateOrderError(e.thisObject.parseErrorMessage(o),e.thisObject.errorLogId),{transactionState:"ERROR",error:{message:o.message}}}}renderButton(e){this.containerSelector=e;let o=jQuery(e);o.html("");let t="default",r="plain",a="";if(void 0!==goopter_ppcp_manager.google_pay_button_props){t=goopter_ppcp_manager.google_pay_button_props.buttonColor,r=goopter_ppcp_manager.google_pay_button_props.buttonType;let e=goopter_ppcp_manager.google_pay_button_props.height;e=""!==e?"height: "+e+"px;":"",a=e}let n=jQuery('<div class="google-pay-container" style="'+(""!=a?a:"")+'"></div>'),g=this;const s=this.getGooglePaymentsClient().createButton({buttonColor:t,buttonType:r,buttonSizeMode:"fill",onClick:async e=>{await g.handleClickEvent(e,g)}});n.append(s),o.append(n)}getGoogleTransactionInfo(){let e=[];const o=goopterOrder.getCartDetails();for(let t=0;t<o.lineItems.length;t++){let r="LINE_ITEM";"tax"===o.lineItems[t].label.toLowerCase()&&(r="TAX"),e.push({label:o.lineItems[t].label,price:o.lineItems[t].amount,type:r})}return{displayItems:e,currencyCode:o.currencyCode,totalPriceStatus:"FINAL",totalPrice:o.totalAmount,totalPriceLabel:"Total"}}getGooglePaymentDataRequest(){const e=Object.assign({},GooglePayCheckoutButton.baseRequest);return e.allowedPaymentMethods=GooglePayCheckoutButton.googlePayConfig.allowedPaymentMethods,e.transactionInfo=this.getGoogleTransactionInfo(),e.merchantInfo=GooglePayCheckoutButton.googlePayConfig.merchantInfo,e.emailRequired=!0,e.callbackIntents=["PAYMENT_AUTHORIZATION"],this.isShippingRequired()&&(e.callbackIntents.push("SHIPPING_ADDRESS"),e.shippingAddressRequired=!0),e}async handleClickEvent(e,o){console.log("click event",e,o.containerSelector),o.errorLogId=goopterJsErrorLogger.generateErrorId();goopterOrder.getCartDetails().totalAmount<=0&&goopterOrder.showError(localizedMessages.empty_cart_message),goopterJsErrorLogger.addToLog(o.errorLogId,"Google Pay Payment Started"),goopterOrder.setPaymentMethodSelector("google_pay");const t=o.getGooglePaymentDataRequest();o.getGooglePaymentsClient({}).loadPaymentData(t).then((e=>{console.log("success",e)}),(e=>{goopterOrder.triggerPaymentCancelEvent(),goopterOrder.hideProcessingSpinner(o.containerSelector),goopterOrder.hideProcessingSpinner(),console.log("error handler click",e)}))}}